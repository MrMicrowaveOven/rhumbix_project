{"version":3,"sources":["components/Gif.js","components/AutofillOption.js","components/Autofill.js","App.js","reportWebVitals.js","index.js"],"names":["Gif","props","useEffect","keyword","getGiphy","fetch","then","response","json","jsonResponse","imageHash","data","url","images","original","setGifUrl","setErrorText","useState","gifUrl","errorText","className","src","AutofillOption","numFilled","value","onClick","e","text","target","innerText","setValue","slice","Autofill","selectedValue","options","validAutofills","filter","word","indexOf","map","autofillOption","length","AUTOFILL_OPTIONS","App","inputValue","setInputValue","setKeyword","onChange","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAyCeA,MAvCf,SAAaC,GAEXC,qBAAU,WAAO,IACRC,EAAWF,EAAXE,QACS,KAAZA,GAAkBC,EAASD,MAGjC,IAAMC,EAAW,SAACD,GAIhBE,MAHsB,0CAClBF,EACA,qDAEHG,MAAK,SAAAC,GAAc,OAAOA,EAASC,UACnCF,MAAK,SAAAG,GAGJ,IAAMC,EAAYD,EAAaE,KAAK,GACpC,GAAID,EAAW,CACb,IAAME,EAAMF,EAAUG,OAAOC,SAASF,IACtCG,EAAUH,GACVI,EAAa,SAEbD,EAAU,IACVC,EAAa,8CAvBD,EA4BUC,mBAAS,IA5BnB,mBA4BXC,EA5BW,KA4BHH,EA5BG,OA6BgBE,mBAAS,IA7BzB,mBA6BXE,EA7BW,KA6BAH,EA7BA,KA+BlB,OACE,sBAAKI,UAAU,MAAf,UACE,qBAAKC,IAAKH,IACV,qBAAKE,UAAU,aAAf,SAA6BD,QCrBpBG,MAff,SAAwBrB,GAAQ,IACvBsB,EAAoBtB,EAApBsB,UAAWC,EAASvB,EAATuB,MAOlB,OACE,sBAAKJ,UAAU,kBAA8BK,QAN3B,SAACC,GACnB,IAAMC,EAAOD,EAAEE,OAAOC,UACtB5B,EAAM6B,SAASH,IAIf,UACE,4BAAIH,EAAMO,MAAM,EAAER,KAAgBC,EAAMO,MAAMR,KADVC,ICW3BQ,MAlBf,SAAkB/B,GAChB,IAAM6B,EAAW,SAACG,GAChBhC,EAAM6B,SAASG,IAGVC,EAAkBjC,EAAlBiC,QAASV,EAASvB,EAATuB,MAEVW,EAAiBD,EAAQE,QAAO,SAAAC,GAAI,OAA4B,IAAxBA,EAAKC,QAAQd,MAE3D,OACE,qBAAKJ,UAAU,WAAf,SACGI,IAA4C,IAAnCW,EAAeG,QAAQd,IAAiBW,EAAeI,KAAI,SAAAC,GACnE,OAAO,cAAC,EAAD,CAAgBjB,UAAWC,EAAMiB,OAA6BjB,MAAOgB,EAAgBV,SAAUA,GAAjDU,SCTvDE,EAAmB,CAAC,QAAS,QAAS,SAAU,MAAO,QAAS,aAAc,MAAO,OAAQ,UAAW,OAAQ,OAkBvGC,MAhBf,WAAgB,IAAD,EAEuB1B,mBAAS,IAFhC,mBAEN2B,EAFM,KAEMC,EAFN,OAGiB5B,mBAAS,IAH1B,mBAGNd,EAHM,KAGG2C,EAHH,KAKb,OACE,sBAAK1B,UAAU,MAAf,UACE,oBAAIA,UAAU,OAAd,kEACA,uBAAO2B,SAAU,SAAArB,GAAC,OAAImB,EAAcnB,EAAEE,OAAOJ,QAAQA,MAAOoB,IAC5D,cAAC,EAAD,CAAUV,QAASQ,EAAkBlB,MAAOoB,EAAYd,SAAU,SAACG,GAAD,OAAmBY,EAAcZ,MACnG,wBAAQR,QAAS,kBAAMqB,EAAWF,IAAaI,SAAgC,IAAtBJ,EAAWH,OAApE,6BACA,cAAC,EAAD,CAAKtC,QAASA,QCNL8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7C,MAAK,YAAkD,IAA/C8C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.50844306.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction Gif(props) {\n\n  useEffect(() => {\n    const {keyword} = props;\n    if (keyword !== '') { getGiphy(keyword) }\n  })\n\n  const getGiphy = (keyword) => {\n    const giphyFetchUrl = \"https://api.giphy.com/v1/gifs/search?q=\"\n      + keyword\n      + \"&api_key=DLCVuTK6KZExOS7JoMq82bi5MaI6EbWO&limit=1\"\n    fetch(giphyFetchUrl)\n    .then(response => { return response.json(); })\n    .then(jsonResponse => {\n      // console.log(jsonResponse)\n      // console.log(url)\n      const imageHash = jsonResponse.data[0]\n      if (imageHash) {\n        const url = imageHash.images.original.url;\n        setGifUrl(url);\n        setErrorText('');\n      } else {\n        setGifUrl('');\n        setErrorText(\"Sorry, I couldn't find a gif for that.\");\n      }\n    });\n  }\n\n  const [gifUrl, setGifUrl] = useState('')\n  const [errorText, setErrorText] = useState('')\n\n  return (\n    <div className=\"gif\">\n      <img src={gifUrl} />\n      <div className=\"error-text\">{errorText}</div>\n    </div>\n  );\n}\n\nexport default Gif;\n","function AutofillOption(props) {\n  const {numFilled, value} = props;\n\n  const handleClick = (e) => {\n    const text = e.target.innerText\n    props.setValue(text)\n  }\n\n  return (\n    <div className=\"autofill-option\" key={value} onClick={handleClick}>\n      <b>{value.slice(0,numFilled)}</b>{value.slice(numFilled)}\n    </div>\n  );\n}\n\nexport default AutofillOption;\n","import AutofillOption  from './AutofillOption.js'\n\nfunction Autofill(props) {\n  const setValue = (selectedValue) => {\n    props.setValue(selectedValue)\n  }\n\n  const {options, value} = props\n\n  const validAutofills = options.filter(word => word.indexOf(value) === 0)\n\n  return (\n    <div className=\"autofill\">\n      {value && validAutofills.indexOf(value) === -1 && validAutofills.map(autofillOption => {\n        return <AutofillOption numFilled={value.length} key={autofillOption} value={autofillOption} setValue={setValue}/>\n      })}\n    </div>\n  );\n}\n\nexport default Autofill;\n","import './App.css';\nimport Gif from './components/Gif.js'\nimport Autofill from './components/Autofill.js'\nimport { useState } from 'react';\n\nconst AUTOFILL_OPTIONS = ['about', 'above', 'across', 'app', 'apple', 'appreciate', 'bad', 'ball', 'balloon', 'bell', 'cat']\n\nfunction App() {\n\n  const [inputValue, setInputValue] = useState('');\n  const [keyword, setKeyword] = useState('')\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"base\">ðŸ‘‹ Thanks for taking our programming test!</h1>\n      <input onChange={e => setInputValue(e.target.value)} value={inputValue}/>\n      <Autofill options={AUTOFILL_OPTIONS} value={inputValue} setValue={(selectedValue) => setInputValue(selectedValue)}/>\n      <button onClick={() => setKeyword(inputValue)} disabled={inputValue.length === 0}>Fetch me a Gif!</button>\n      <Gif keyword={keyword}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}